- try to always use unique data sets. by using online repositry
 uci repository

***********************************
 create table sanjay.ineuron(
employee_id int(10),
emp_name varchar(80),
emp_mailid varchar(20),
emp_salary int(6),
emp_attendednce int(3)
)
show databases
select *from sanjay.ineuron2
select *from sanjay.ineuron1

select *from sanjay

***************************************

show databases
create database ineuron
use ineuron

create table bank_details(
age int,
job varchar(30),
marital varchar(30),
education varchar(30),
`default` varchar(30),
balance int,
housing varchar(30),
loan varchar(30),
contact varchar(30),
`day` int,
`month` varchar(30),
duration int,
campaign int,
pdays int,
previous int,
poutcome varchar(30),
y varchar(30))

************************
create table if not exists bank_details(
age int,
job varchar(30),
marital varchar(30),
education varchar(30),
`default` varchar(30),
balance int,
housing varchar(30),
loan varchar(30),
contact varchar(30),
`day` int,
`month` varchar(30),
duration int,
campaign int,
pdays int,
previous int,
poutcome varchar(30),
y varchar(30))
***********************************
show tables
# to show available tables
****************************
describe bank_details


insert into bank_details values(58,"management","married","tertiary","no",2143,"yes","no","unknown",5,"may",261,1,-1,0,"unknown","no")


*******************************************
insert into bank_details values
(44,"technician","single","secondary","no",29,"yes","no","unknown",5,"may",151,1,-1,0,"unknown","no"),
(33,"entrepreneur","married","secondary","no",2,"yes","yes","unknown",5,"may",76,1,-1,0,"unknown","no"),
(47,"blue-collar","married","unknown","no",1506,"yes","no","unknown",5,"may",92,1,-1,0,"unknown","no"),
(33,"unknown","single","unknown","no",1,"no","no","unknown",5,"may",198,1,-1,0,"unknown","no"),
(35,"management","married","tertiary","no",231,"yes","no","unknown",5,"may",139,1,-1,0,"unknown","no"),
(28,"management","single","tertiary","no",447,"yes","yes","unknown",5,"may",217,1,-1,0,"unknown","no"),
(42,"entrepreneur","divorced","tertiary","yes",2,"yes","no","unknown",5,"may",380,1,-1,0,"unknown","no"),
(58,"retired","married","primary","no",121,"yes","no","unknown",5,"may",50,1,-1,0,"unknown","no"),
(43,"technician","single","secondary","no",593,"yes","no","unknown",5,"may",55,1,-1,0,"unknown","no"),
(41,"admin.","divorced","secondary","no",270,"yes","no","unknown",5,"may",222,1,-1,0,"unknown","no"),
(29,"admin.","single","secondary","no",390,"yes","no","unknown",5,"may",137,1,-1,0,"unknown","no"),
(53,"technician","married","secondary","no",6,"yes","no","unknown",5,"may",517,1,-1,0,"unknown","no"),
(58,"technician","married","unknown","no",71,"yes","no","unknown",5,"may",71,1,-1,0,"unknown","no"),
(57,"services","married","secondary","no",162,"yes","no","unknown",5,"may",174,1,-1,0,"unknown","no"),
(51,"retired","married","primary","no",229,"yes","no","unknown",5,"may",353,1,-1,0,"unknown","no"),
(45,"admin.","single","unknown","no",13,"yes","no","unknown",5,"may",98,1,-1,0,"unknown","no"),
(57,"blue-collar","married","primary","no",52,"yes","no","unknown",5,"may",38,1,-1,0,"unknown","no"),
(60,"retired","married","primary","no",60,"yes","no","unknown",5,"may",219,1,-1,0,"unknown","no")


select age, job from bank_details

select `default` , age  from bank_details

select * from bank_details where age = 41

select job from bank_details where age = 41
******************************************************************************************************


select * from bank_details where job = 'retired' and balance > 100

select * from bank_details where education = 'primary' or balance < 100
select distinct job from bank_details
select * from bank_details

select * from bank_details order by age
select * from bank_details order by age  desc
use ineuron
select count(*) from bank_details
select sum(balance) from bank_details
select avg(balance) from bank_details
select min(balance) from bank_details
select * from bank_details where balance = (select min(balance) from bank_details)
select count(*) from bank_details group by marital
select marital, count(*) from bank_details group by marital
select education, count(*) from bank_details group by education
select marital, count(*), sum(balance), avg(balance) from bank_details group by marital having sum(balance) >300

select job, count(*) from bank_details group by job



*************************************************************************************

select * from bank_details

update bank_details set balance = 0 where job = 'unknown'

set sql_safe_updates = 0    --------- for updating the safe mode and enable editing in table

update bank_details set balance = 0 where job = 'unknown'

update bank_details set contact = 'known', y='yes' where month = 'may'
update bank_details set `default` = 'null' where `default` = 'no'

delete from bank_details where job = 'unknown'

******************************************************************************
- function in sql called procedures

DELIMITER &&
create procedure select_pre()
BEGIN
     select * from bank_details;
END &&

call select_pre()

DELIMITER &&
create procedure select_pre_filter()
BEGIN
     select * from bank_details where job = 'retired' and balance > 100;
END &&

call select_pre_filter()


DELIMITER &&
create procedure select_pre_filter1(IN var int)
BEGIN
     select * from bank_details where job = 'retired' and balance > var;
END &&

call select_pre_filter1(50)


DELIMITER &&
create procedure select_pre_filter2(IN var int, IN var1 varchar(30))
BEGIN
     select * from bank_details where job = var1 and balance > var;
END &&

call select_pre_filter2(100,'services')

call select_pre()

********** for reducting computation extracting column and placing it in view can say them virtual table**********
- subset of actual table

(select job, age, education, y from bank_details) as a * from a where a.age = 58

select * from (select job, age, education, y from bank_details) as a where a.age = 58
select job, age ,education, y from bank_details where age = 58

create view bank_view as select job, age, education, y from bank_details
select *  from bank_view
********************************************************************************************************************

      ________________________join operations______________________________
      create table if not exists bank_details1(
age int,
job varchar(30),
marital varchar(30),
education varchar(30),
`default` varchar(30),
balance int,
housing varchar(30),
loan varchar(30),
contact varchar(30),
`day` int,
`month` varchar(30),
duration int,
campaign int,
pdays int,
previous int,
poutcome varchar(30),
y varchar(30))

show tables

insert into bank_details1 select * from bank_details ;
select * from bank_details1
insert into bank_details2 select * from bank_details where age = 58;
select * from bank_details2
select bank_details.age, bank_details.job, bank_details.marital from bank_details inner join bank_details2 on bank_details.age = bank_details2.age



select bank_details.age, bank_details.job, bank_details.marital from bank_details left join bank_details2 on bank_details.age = bank_details2.age
select bank_details.age, bank_details.job, bank_details.marital from bank_details right join bank_details2 on bank_details.age = bank_details2.age